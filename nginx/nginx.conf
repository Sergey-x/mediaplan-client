user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    client_max_body_size 0;

    upstream files {
        server media:3457;
    }

    upstream jwt {
        server jwt:8082;
    }

    upstream user {
        server user:8084;
    }

    upstream schedule {
        server schedule:8083;
    }

    upstream auth-server {
        server jwt-filter:8086;
    }

    server {
        server_name localhost;

        # сжатие для статики
        gzip on;
        gzip_disable "msie6";
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_min_length 10;
        gzip_types text/plain application/javascript text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype application/x-font-woff font/woff font/woff2;

        root /nginx/static;
        index index.html;

        add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH, OPTIONS, DELETE' always;
        add_header Access-Control-Allow-Headers 'authorization, content-type' always;
        add_header Access-Control-Allow-Origin  '*' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Max-Age 1720000 always;

        if ($request_method = OPTIONS) {
            return 200;
        }

        location /jwt {
            proxy_pass http://jwt;
        }

        location /files {
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://files;
        }

        location /user/registration {
            proxy_pass http://user;
        }

        location /user {
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;

            # set user's id (from auth request) in http header `X-User-Identity`
            auth_request_set $user_id $upstream_http_x_user_identity;  # get user's id in `$user_id`
            proxy_set_header X-User-Identity $user_id;  # set new custom http header

            proxy_pass http://user;
        }

        location /schedule {
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;

            # set user's id (from auth request) in http header `X-User-Identity`
            auth_request_set $user_id $upstream_http_x_user_identity;  # get user's id in `$user_id`
            proxy_set_header X-User-Identity $user_id;  # set new custom http header

            proxy_pass http://schedule;
        }


        # Authorization header validation
        location = /auth {
            internal;
            proxy_pass                      http://auth-server/;
            proxy_pass_request_body         off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        # STATICFILES: .js, .css, .html ...
        location /static {
            root /nginx;
        }


        # Files saved by users
        location /media {
            root /nginx;
        }

        location / {
            add_header Cache-Control no-cache;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires 0;
            index index.html;
            try_files $uri /index.html;
        }
    }
}
